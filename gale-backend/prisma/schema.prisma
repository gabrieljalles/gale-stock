generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String              @id @default(cuid())
  name         String @unique
  description  String?
  category     Category
  tags         String[]
  sizeType     SizeType
  pack         Int
  size         String
  imgUrl       String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  catalog      Catalog?
  LostEntry    LostEntry[]
  stockEntries StockEntryDetails[]
}

model Supplier {
  id                  String             @id @default(cuid())
  legalRepresentative String
  enterprise          String
  cellphone           String
  appName             String?
  city                String
  stockTransactions   StockTransaction[]
}

model StockTransaction {
  id                String                        @id @default(cuid())
  supplierId        String
  transactionType   TransactionType
  numberPayments    Int
  firstPaymentDate  DateTime?
  totalProductCost  Decimal @db.Decimal(10,2)
  freightCost Decimal @db.Decimal(10,2)
  feeCost Decimal     @db.Decimal(10,2)
  totalCost         Decimal @db.Decimal(10,2)
  statusCheckout    String
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt
  stockEntryDetails StockEntryDetails[]
  supplier          Supplier                      @relation(fields: [supplierId], references: [id])
  installments      StockTransactionInstallment[]
}

model StockTransactionInstallment {
  id                 String           @id @default(cuid())
  stockTransactionId String
  installmentNumber  Int
  dueDate            DateTime
  paidDate           DateTime?
  fragmentCost      Decimal @db.Decimal(10,2)
  transaction        StockTransaction @relation(fields: [stockTransactionId], references: [id], onDelete: Cascade)
}

model StockEntryDetails {
  id               String           @id @default(cuid())
  stockTransactionId    String
  productId        String
  productCost Decimal @db.Decimal(10,2)
  quantity         Int
  totalProductCost Decimal @db.Decimal(10,2)
  validityDate     DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  product          Product          @relation(fields: [productId], references: [id])
  stockTransaction StockTransaction @relation(fields: [stockTransactionId], references: [id], onDelete: Cascade)
}

model LostEntry {
  id         String     @id @default(cuid())
  productId  String
  quantity   Int
  reasonLoss ReasonLoss
  note       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  product    Product    @relation(fields: [productId], references: [id])
}

model Catalog {
  id                      String   @id
  finalConsumerPrice      Decimal? @db.Decimal(10,2)
  finalIfoodConsumerPrice Decimal? @db.Decimal(10,2)
  isLiquidation           Boolean @default(false)
  discountPrice           Decimal? @db.Decimal(10,2)
  quantityDiscount        Int?
  discountQtdPrice        Decimal? @db.Decimal(10,2)
  stock                   Int @default(0)
  available               Boolean  @default(false)

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  product                 Product  @relation(fields: [id], references: [id], onDelete: Cascade)
  discountCatalog DiscountCatalog[]
  orderDetails OrderDetails[]
}

model DiscountCatalog { 
  id String @id @default(cuid())
  productId String
  initialDate DateTime 
  finalDate DateTime
  catalog Catalog @relation(fields:[productId], references: [id])
}

model OrderRequest{ 
  id String @id @default(cuid())
  deliveryType DeliveryType @default(InStore)
  orderSource OrderSource
  clientId String?
  deliveryManId String?
  orderStatus OrderStatus @default(Confirmed)
  createdAT DateTime @default(now())
  updateAt DateTime @updatedAt

  client User? @relation("ClientOrders", fields: [clientId], references: [id])
  deliveryMan User? @relation("DeliveryOrders", fields: [deliveryManId], references: [id])
  orderAddress OrderAddress[]
  orderDetails OrderDetails[]
  orderTransaction OrderTransaction[]
}

model OrderDetails{
  id String @id @default(cuid())
  orderRequestId String
  productId String
  quantity Int
  unityPrice Decimal @db.Decimal(10,2)
  totalPrice Decimal @db.Decimal(10,2)

  catalog Catalog @relation(fields:[productId], references: [id])
  orderRequest OrderRequest @relation(fields:[orderRequestId], references: [id], onDelete: Cascade)
}

model OrderTransaction{
  id String @id @default(cuid())
  orderRequestId String
  transactionType TransactionType?
  totalPrice Decimal @db.Decimal(10,2)
  statusCheckout String
  paidDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderRequest OrderRequest @relation(fields:[orderRequestId], references: [id], onDelete: Cascade)
}

model OrderAddress{
  id String @id @default(cuid())
  orderRequestId String
  typeAddress TypeAddress
  address String
  number String
  district String
  complement String?
  zipCode String?

  order OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
}

model User{
  id String @id @default(cuid())
  fullName String
  cellPhone String
  email String @unique
  cpfCNPJ String
  accountType AccountType? @default(Client)
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarUrl String?
  
  clientOrders OrderRequest[] @relation("ClientOrders")
  deliveryOrders OrderRequest[] @relation("DeliveryOrders")
  address UserAddress[]
}

model UserAddress{
  id String @id @default(cuid())
  userId String
  typeAddress TypeAddress
  address String
  number String
  complement String?
  district String
  zipCode String?
  User  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TypeAddress {
  Street
  Avanue
  Alley
  Lane
  Highway
  Road
  Square
  Village
  Condominium
}

enum DeliveryType {
  PickupAtStore // Cliente irá retirar no local
  InStore // Cliente fez o pedido no balcão 
  Delivery // Cliente pede para ter delivery
}

enum OrderStatus {
  Draft // Pedido em construção
  Placed // Seu pedido foi enviado
  Confirmed // Loja sabe que o pedido existe e confirma ele
  PickedUp // Pedido retirado mas não teve método de pagamento selecionado.
  Preparing // Preparando pedido
  ReadyToPickup // Pronto para pegar
  OutForDelivery //Em rota de entrega
  Delivered // Entregue
  DeliverFailed // Entrega falhou
  Concluded // Concluído
  Cancelled // Cancelado
}

enum OrderSource {
  App
  WhatsApp
  Instagram
  Call
  Local
  Ifood 
}

enum AccountType {
  Admin
  Shopper
  DeliveryMan
  Client
}

enum SizeType {
  g
  L
  ml
  mg
  kg
  un
}

enum ReasonLoss {
  Theft
  DamegedProduct
  CustomerReturn
  Expiration
  Operacional
  Loss
}

enum Category {
  Beers
  Tobacco
  NonAlcoholic
  Spirits
  Candy
  FrozenFoods
  PharmacyPersonalCare
  Grocery
  Wines
  Snacks
  Others
}

enum TransactionType {
  BankSlip
  CreditCard
  Money
  Pix
  DebitCard
  OnTheBill

}
