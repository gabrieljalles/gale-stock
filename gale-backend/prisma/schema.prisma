generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String              @id @default(cuid())
  name         String
  description  String
  category     Category
  tags         String[]
  sizeType     SizeType
  pack         Int
  size         String
  imgUrl       String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  catalog      Catalog?
  LostEntry    LostEntry[]
  stockEntries StockEntryDetails[]
}

model Supplier {
  id                  String             @id @default(cuid())
  legalRepresentative String
  enterprise          String
  cellphone           String
  appName             String?
  stockTransactions   StockTransaction[]
}

model StockTransaction {
  id                String                        @id @default(cuid())
  supplierId        String
  transactionType   TransactionType
  NumberPayments    Int
  firstPaymentDate  DateTime?
  totalCost         Float
  statusCheckout    String
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt
  StockEntryDetails StockEntryDetails[]
  supplier          Supplier                      @relation(fields: [supplierId], references: [id])
  installments      StockTransactionInstallment[]
}

model StockTransactionInstallment {
  id                 String           @id @default(cuid())
  stockTransactionId String
  installmentNumber  Int
  dueDate            DateTime
  paidDate           DateTime?
  amount             Float
  transaction        StockTransaction @relation(fields: [stockTransactionId], references: [id])
}

model StockEntryDetails {
  id               String           @id @default(cuid())
  productId        String
  quantity         Int
  validityDate     DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  transactionId    String
  product          Product          @relation(fields: [productId], references: [id])
  StockTransaction StockTransaction @relation(fields: [transactionId], references: [id])
}

model LostEntry {
  id         String     @id @default(cuid())
  productId  String
  quantity   Int
  reasonLoss ReasonLoss
  note       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  product    Product    @relation(fields: [productId], references: [id])
}

model Catalog {
  id                      String   @id
  finalConsumerPrice      Float
  finalIfoodConsumerPrice Float
  discountPrice           Float
  quantityDiscount        Int
  discountQtdPrice        Float
  stock                   Int
  available               Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  product                 Product  @relation(fields: [id], references: [id])
}

enum SizeType {
  g
  L
  ml
  mg
  kg
  un
}

enum ReasonLoss {
  Furto
  ProdutoDanificado
  DevolucaoCliente
  Validade
  Operacional
  Perda
}

enum Category {
  Beers
  Tobacco
  NonAlcoholic
  Spirits
  Candy
  FrozenFoods
  PharmacyPersonalCare
  Grocery
  Wines
  Snacks
  Others
}

enum TransactionType {
  BankSlip
  CreditCard
  Money
  Pix
  DebitCard
}
